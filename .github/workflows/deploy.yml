name: Deploy to Vue Storefront Cloud
on:
  push:
    branches:
      - develop
      - feat/*-deployment
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name'
        required: true
        type: choice
        default: 'Production EU'
        options:
          - Production EU
jobs:
  configure-deployment:
    if: github.event.repository.name == 'storefront-nuxt-sap'
    name: Configure deployment
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.resolve-environment.outputs.env }}
    steps:
      - name: Determine environment-specific variables
        shell: bash
        id: resolve-environment
        run: |
          if [ '${{ inputs.environment }}' == 'Production EU' ]; then
            ENV=Production-EU
          else
            ENV=Develop
          fi
          echo "env=$ENV" >> $GITHUB_OUTPUT
          echo "Selected environment: $ENV"

  build-frontend:
    runs-on: ubuntu-latest
    needs: configure-deployment
    environment: ${{ needs.configure-deployment.outputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEFAULT_ENTERPRISE_TOKEN }}
        with:
          node-version-file: './.github/.node-version'
          cache: 'yarn'
          registry-url: https://registrynpm.storefrontcloud.io

      - name: Build and publish docker image
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: ${{ vars.PROJECT_NAME }}-storefrontcloud-io/vue-storefront:${{ github.sha }}
          registry: ${{ secrets.DOCKER_REGISTRY_URL || 'registry.vuestorefront.cloud' }}
          username: ${{ secrets.CLOUD_USERNAME }}
          password: ${{ secrets.CLOUD_PASSWORD }}
          dockerfile: .vuestorefrontcloud/docker/frontend/Dockerfile
          buildoptions: '--compress'
          buildargs: NODE_AUTH_TOKEN,NPM_EMAIL,NPM_PASS,NPM_USER,NPM_REGISTRY,NUXT_PUBLIC_SDK_CNTF_API_URL,NUXT_PUBLIC_SDK_SAPCC_API_URL,NUXT_PUBLIC_SDK_SAPCC_SSR_API_URL,NUXT_PUBLIC_MAX_VISIBLE_CATEGORIES,NUXT_PUBLIC_CATEGORY_ITEMS_PER_PAGE,NUXT_PUBLIC_CLOUDINARY_CMS_URL,NUXT_PUBLIC_CLOUDINARY_BASE_URL,NUXT_PUBLIC_CLOUDINARY_UPLOAD_DIR
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEFAULT_ENTERPRISE_TOKEN }}
          NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
          NPM_PASS: ${{ secrets.NPM_PASS }}
          NPM_USER: ${{ secrets.NPM_USER }}
          NPM_REGISTRY: https://registrynpm.storefrontcloud.io
          NUXT_PUBLIC_SDK_CNTF_API_URL: ${{ vars.NUXT_PUBLIC_SDK_CNTF_API_URL }}
          NUXT_PUBLIC_SDK_SAPCC_API_URL: ${{ vars.NUXT_PUBLIC_SDK_SAPCC_API_URL }}
          NUXT_PUBLIC_SDK_SAPCC_SSR_API_URL: ${{ vars.NUXT_PUBLIC_SDK_SAPCC_SSR_API_URL }}
          NUXT_PUBLIC_MAX_VISIBLE_CATEGORIES: ${{ vars.NUXT_PUBLIC_MAX_VISIBLE_CATEGORIES }}
          NUXT_PUBLIC_CATEGORY_ITEMS_PER_PAGE: ${{ vars.NUXT_PUBLIC_CATEGORY_ITEMS_PER_PAGE }}
          NUXT_PUBLIC_CLOUDINARY_CMS_URL: ${{ vars.NUXT_PUBLIC_CLOUDINARY_CMS_URL }}
          NUXT_PUBLIC_CLOUDINARY_BASE_URL: ${{ vars.NUXT_PUBLIC_CLOUDINARY_BASE_URL }}
          NUXT_PUBLIC_CLOUDINARY_UPLOAD_DIR: ${{ vars.NUXT_PUBLIC_CLOUDINARY_UPLOAD_DIR }}

  build-middleware:
    runs-on: ubuntu-latest
    needs: configure-deployment
    environment: ${{ needs.configure-deployment.outputs.env }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEFAULT_ENTERPRISE_TOKEN }}
        with:
          node-version-file: './.github/.node-version'
          cache: 'yarn'
          registry-url: https://registrynpm.storefrontcloud.io

      - name: Build and publish docker image (middleware)
        uses: elgohr/Publish-Docker-Github-Action@v5
        with:
          name: ${{ vars.PROJECT_NAME }}-storefrontcloud-io/vue-storefront-middleware:${{ github.sha }}
          registry: ${{ secrets.DOCKER_REGISTRY_URL || 'registry.vuestorefront.cloud' }}
          username: ${{ secrets.CLOUD_USERNAME }}
          password: ${{ secrets.CLOUD_PASSWORD }}
          dockerfile: .vuestorefrontcloud/docker/middleware/Dockerfile
          buildoptions: '--compress'
          buildargs: NODE_AUTH_TOKEN,NPM_EMAIL,NPM_PASS,NPM_USER,NPM_REGISTRY,CNTF_SPACE,CNTF_TOKEN,CNTF_BRANCH,SAPCC_OAUTH_URI,SAPCC_OAUTH_CLIENT_ID,SAPCC_OAUTH_CLIENT_SECRET,SAPCC_OAUTH_TOKEN_ENDPOINT,SAPCC_OAUTH_TOKEN_REVOKE_ENDPOINT,SAPCC_API_URI,SAPCC_MEDIA_HOST,DEFAULT_BASE_SITE_ID,DEFAULT_CATALOG_ID,DEFAULT_CATALOG_VERSION,DEFAULT_LANGUAGE,DEFAULT_CURRENCY=GBP
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_DEFAULT_ENTERPRISE_TOKEN }}
          NPM_EMAIL: ${{ secrets.NPM_EMAIL }}
          NPM_PASS: ${{ secrets.NPM_PASS }}
          NPM_USER: ${{ secrets.NPM_USER }}
          NPM_REGISTRY: https://registrynpm.storefrontcloud.io
          CNTF_SPACE: ${{ vars.CNTF_SPACE }}
          CNTF_TOKEN: ${{ secrets.CNTF_TOKEN }}
          CNTF_BRANCH: ${{ vars.CNTF_BRANCH }}
          SAPCC_OAUTH_URI: ${{ vars.SAPCC_OAUTH_URI }}
          SAPCC_OAUTH_CLIENT_ID: ${{ vars.SAPCC_OAUTH_CLIENT_ID }}
          SAPCC_OAUTH_CLIENT_SECRET: ${{ secrets.SAPCC_OAUTH_CLIENT_SECRET }}
          SAPCC_OAUTH_TOKEN_ENDPOINT: ${{ vars.SAPCC_OAUTH_TOKEN_ENDPOINT }}
          SAPCC_OAUTH_TOKEN_REVOKE_ENDPOINT: ${{ vars.SAPCC_OAUTH_TOKEN_REVOKE_ENDPOINT }}
          SAPCC_API_URI: ${{ vars.SAPCC_API_URI }}
          SAPCC_MEDIA_HOST: ${{ vars.SAPCC_MEDIA_HOST }}
          DEFAULT_BASE_SITE_ID: ${{ vars.DEFAULT_BASE_SITE_ID }}
          DEFAULT_CATALOG_ID: ${{ vars.DEFAULT_CATALOG_ID }}
          DEFAULT_CATALOG_VERSION: ${{ vars.DEFAULT_CATALOG_VERSION }}
          DEFAULT_LANGUAGE: ${{ vars.DEFAULT_LANGUAGE }}
          DEFAULT_CURRENCY: ${{ vars.DEFAULT_CURRENCY }}

  deploy:
    runs-on: ubuntu-latest
    environment: ${{ needs.configure-deployment.outputs.env }}
    permissions:
      deployments: write
    needs: [configure-deployment, build-frontend, build-middleware]
    steps:
      - uses: chrnorm/deployment-action@releases/v1
        name: Create GitHub deployment
        id: deployment
        with:
          token: '${{ github.token }}'
          target_url: https://${{ vars.PROJECT_NAME }}.${{ vars.CLOUD_REGION }}.gcp.storefrontcloud.io
          environment: ${{ needs.configure-deployment.outputs.env }}
          initial_status: in_progress

      - name: Deploy on ${{ vars.PROJECT_NAME }}.${{ vars.CLOUD_REGION }}.gcp.storefrontcloud.io
        run: |
          curl --location --request PATCH '${{ secrets.CONSOLE_API_URL || 'https://api.platform.vuestorefront.io' }}/cloud/instances/${{ vars.PROJECT_NAME }}-${{ vars.CLOUD_REGION }}-gcp-storefrontcloud-io/deploy' --header 'Content-Type: application/json' --data-raw '{ "cloudUserId": "${{ secrets.CLOUD_USERNAME }}", "cloudUserPassword": "${{ secrets.CLOUD_PASSWORD }}", "dockerImageHash": "${{ github.sha }}"}'

      - name: Deploy middleware on ${{ vars.PROJECT_NAME }}.${{ vars.CLOUD_REGION }}.gcp.storefrontcloud.io/api/
        run: |
          if curl -f -s -H 'X-User-Id: ${{ secrets.CLOUD_USERNAME }}' -H 'X-Api-Key: ${{ secrets.CLOUD_PASSWORD }}' -H 'Content-Type: application/json' -X PATCH -d '{
            "front_version":"${{ github.sha }}",
            "additional_apps": {
              "apps":[{
                "name":"middleware",
                "tag":"${{ github.sha }}",
                "image":"${{ secrets.DOCKER_REGISTRY_URL || 'registry.vuestorefront.cloud' }}/${{ vars.PROJECT_NAME }}-storefrontcloud-io/vue-storefront-middleware",
                "path":"/api/",
                "port":"8181",
                "has_base_path":false
              }],
              "enabled": true
              }
            }' ${{ secrets.CLOUD_API_BASE_URL || 'https://farmer.vuestorefront.cloud' }}/instance/${{ vars.PROJECT_NAME }}-${{ vars.CLOUD_REGION }}-gcp-storefrontcloud-io; then
            echo "Instance updated"
          else
            echo "Something went wrong during the update process..."
            exit 1
          fi

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ github.token }}'
          target_url: https://${{ vars.PROJECT_NAME }}.${{ vars.CLOUD_REGION }}.gcp.storefrontcloud.io
          state: 'success'
          description: Congratulations! The deploy is done.
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: '${{ github.token }}'
          target_url: https://${{ vars.PROJECT_NAME }}.${{ vars.CLOUD_REGION }}.gcp.storefrontcloud.io
          description: Unfortunately, the instance hasn't been updated.
          state: 'failure'
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
